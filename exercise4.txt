1. Write this one-line "hello world" program using a text editor,
   and save it as hello.hs.

main = putStr "Hello World!\n"

   Start a shell or command prompt.

   cd to where your hello.hs file is.

   Type the following:

     ghc hello.hs

   You should get an executable called hello (or hello.exe on Windows).

   Run your program with ./hello (or hello.exe on Windows).

   Your program is completely standalone.  It doesn't need a runtime
   like .NET or a JVM.

2. Write this program in hello2.hs, and compile and run it as before.

main = do
  putStr "What is your name?\n"
  name <- getLine
  putStr $ "Welcome to Haskell, " ++ name ++ "!\n"

3. Consider the following program.

import Data.Char
main = interact $ map toUpper

   Find out what toUpper does, by doing a web search for:

      haskell toUpper

   What is toUpper's signature?

   What about the signature of: map toUpper ?

   Check these signatures by loading Data.Char into GHCi with:

      :m +Data.Char

   and typing things like this:

      :t toUpper
      :t map toUpper

   Once you have the signatures, try using "toUpper" and "map toUpper"
   directly at the GHCi prompt.

   Does the signature of "map toUpper" fit nicely with the signature
   of "interact"?

4. *** Extra challenge exercises ***

   What do you reckon this program does?

main = interact $ unlines . map (drop 2) . lines

   Check your guess by doing web searches for things like: haskell unlines

   Or have a look at the signatures by typing this sort of thing at
   the GHCi prompt:

      :t lines

   How about this program?

main = interact $ unlines . filter (/= "") . lines
