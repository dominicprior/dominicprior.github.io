Beginning Haskell
f(a, b) f a b

sqrt 2 + sqrt 3

map sqrt [1..5]

filter odd [1..5]

[1,3,5]


map (*2) [1..5]
filter (>3) [1..5]
map (^2) [1..5]
map (2^) [1..5]

[1,4,9,16,25]

[2,4,8,16,32]

[2,4,6,8,10]

[4,5]


(*) number
number
number

(*2)

number

number


map (^2)

 (filter odd [1..5])

sum
(map (^2)
(filter odd [1..5]))
sin (cos (tan (sqrt 2)))
sin $ cos $ tan $ sqrt 2
sin cos tan sqrt 2

sin ( some stuff )

sin $ some stuff

sin $ cos (tan (sqrt 2))


map (^2) (filter odd [1..5])

map (^2) $ filter odd [1..5]
sum $
map (^2) $
filter odd [1..5]
The sum of
the squares of
some odd numbers
[1,3,5]

[1,9,25]

35


[1..]

takeWhile (<100) $

 map (2^) [1..]

[2,4,8,16,32,64]
Demo
Exercises 1
https://dominicprior.github.io/


Defining Functions


sq x = x^2

sq = \x -> x^2

sq = (^2)

h x y = x + 2 * y
f 0 = 1
f n = n * f (n-1)
Factorial
4! = 4 * 3!

f 2

2 * f 1

2 * (1 * f 0)

2 * (1 * 1)


4 : [5,6]

[4,5,6]

[2,3] ++ [4,5,6]

[2,3,4,5,6]
i++
[5,6,7] !! 2
7


[2,4]

2 : [4]

2 : (4 : [])

2 : 4 : []

"hi" ['h', 'i']

"hello" !! 1

'e'
sum [] = 0
sum [2, 3, 4] = 2 + sum [3, 4]
sum (x:xs) = x + sum xs
Writing our own sum function
Exercises 2

https://dominicprior.github.io/


Types


Int

Integer

Float

Double

Char 'a'

String "hi"

Bool True

 False

[Int]

[Integer]

[Float]

[Double]

[Char]

[String]

[Bool]

[[Int]]
Int
Integer
Float
Double
Char
String
Bool
[Int]
[Integer]
(Int,String) (3,"hi")

(Char,Bool,[Int])

Set Int

Set Integer


odd :: Int -> Bool

length :: [a] -> Int

take :: Int -> [a] -> [a]



sum :: Num a => [a] -> a


map sqrt [1..5]

map ::

some function ->
map :: (a -> b) -> [a] -> [b]
a list ->
another list


Exercises 3

https://dominicprior.github.io/


map (*2) [1,2,3]

zipWith (*) [1,2,3] [4,5,6]

[4,10,18]
map (sqrt . sqrt) [1,2,3]
foldr (+) 0 [1,2,3] 6

foldl' (+) 0 [1,2,3]

6


I/O


f :: String -> String

g :: String -> IO String
readFile :: String -> IO String
getChar :: IO Char
putStr :: String -> IO ()

main :: IO ()


main = do

 str <- readFile "foo.txt"

 let str' = take 100 str

 writeFile "a.txt" str'

readFile :: String -> IO String

writeFile :: String -> String -> IO ()


main = do
str <- getContents
let str' = f str
putStr str'
f = take 100
main = interact $ take 100
interact :: (String -> String) -> IO ()
Exercises 4

https://dominicprior.github.io/


Laziness


Defining our own map function

map :: (a -> b) -> [a] -> [b]

map _ [] = []
map f [1,2,3] = [ f 1, f 2, f 3 ]
= f 1 : [ f 2, f 3 ]
= f 1 : map f [2,3]

map f (x:xs) = f x : map f xs


