// An animation of some stars coming towards us.

// It relies on SVG using sub-pixel accuracy.

// See https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame

// The viewpoint moves along the z-axis towards the stars that are
// generated by addNewStars.

'use strict'

const winW = window.innerWidth
const winH = window.innerHeight
let div = document.createElement('div')
document.body.append(div)
let svg = SVG().addTo('body').size(winW, winH)

const fov = 45  // degrees - see https://threejs.org/manual/#en/fundamentals
const numStars = 240
const starDiam = 1
const boxSize = 1000
let furthestStars = 0
let speed = 75

let eyePos   = [0, 0, 0]
let eyeDir   = [0, 1, 0]   // facing North
let eyeRight = [1, 0, 0]   // screen x dir
let eyeUp    = [0, 0, 1]

function rnd(a, b) {
  return a + (b - a) * Math.random()
}

function rndColor() {
  return new SVG.Color({ r: rnd(100, 255),
                         g: rnd(100, 255),
                         b: rnd(100, 255),
                         a: 100 })
}

let stars = []

function hypotSq(a) {
  return a[0] * a[0] + a[1] * a[1] + a[2] * a[2]
}

function minus(u, v) {
  return [u[0] - v[0], u[1] - v[1], u[2] - v[2]]
}

function dot(u, v) {
  return u[0] * v[0] + u[1] * v[1] + u[2] * v[2]
}

function draw(t) {
  // eyePos[0] = t
  const c = Math.cos(t/4)
  const s = Math.sin(t/4)
  let eyeDir   = [-s, c, 0]   // facing North
  let eyeRight = [c, s, 0]   // screen x dir
    stars = []
  for (let j=2; j >= -2; j--) {
    for (let i=2; i >= -2; i--) {
      stars.push([2*j, 4, 2*i, 'pink'])
    }
  }
/*  stars = [
          [0, 4, 0, 'pink'],
          [0, 4, 1, 'blue'],
          [0, 4, 2, 'red']
] */
  svg.clear()
  stars.sort((a, b) => hypotSq(b) - hypotSq(a))
  for (let star of stars) {
    const pos = minus(star, eyePos)
    let z = dot(pos, eyeDir)
    const y = dot(pos, eyeUp)
    const x = dot(pos, eyeRight)
    if (z < boxSize) {
      let tanFov = 3
      z += Math.sqrt(x*x + y*y + z*z) ; tanFov /= 2
      const scale = Math.min(winW, winH) / tanFov
      svg.circle(starDiam * scale / z).center(
        x / z * scale + winW / 2,
        - y / z * scale + winH / 2).fill(star[3])
    }
  }
}

// Update the SVG model (in response to requestAnimationFrame).
// For simplicity, it throws away the current SVG model and
// regenerates it from the circles array.

function step(timestamp) {
  let t = timestamp / 1000
  if (t > 6) {
    return
  }
  draw(t)
  window.requestAnimationFrame(step)
}

window.requestAnimationFrame(step)

// draw(0)
